/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IpInfoLazyImport = createFileRoute('/ip-info')()
const IndexLazyImport = createFileRoute('/')()
const DnsIndexLazyImport = createFileRoute('/dns/')()
const DnsTypeLazyImport = createFileRoute('/dns/$type')()

// Create/Update Routes

const IpInfoLazyRoute = IpInfoLazyImport.update({
  id: '/ip-info',
  path: '/ip-info',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ip-info.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DnsIndexLazyRoute = DnsIndexLazyImport.update({
  id: '/dns/',
  path: '/dns/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dns/index.lazy').then((d) => d.Route))

const DnsTypeLazyRoute = DnsTypeLazyImport.update({
  id: '/dns/$type',
  path: '/dns/$type',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dns/$type.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ip-info': {
      id: '/ip-info'
      path: '/ip-info'
      fullPath: '/ip-info'
      preLoaderRoute: typeof IpInfoLazyImport
      parentRoute: typeof rootRoute
    }
    '/dns/$type': {
      id: '/dns/$type'
      path: '/dns/$type'
      fullPath: '/dns/$type'
      preLoaderRoute: typeof DnsTypeLazyImport
      parentRoute: typeof rootRoute
    }
    '/dns/': {
      id: '/dns/'
      path: '/dns'
      fullPath: '/dns'
      preLoaderRoute: typeof DnsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/ip-info': typeof IpInfoLazyRoute
  '/dns/$type': typeof DnsTypeLazyRoute
  '/dns': typeof DnsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/ip-info': typeof IpInfoLazyRoute
  '/dns/$type': typeof DnsTypeLazyRoute
  '/dns': typeof DnsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/ip-info': typeof IpInfoLazyRoute
  '/dns/$type': typeof DnsTypeLazyRoute
  '/dns/': typeof DnsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ip-info' | '/dns/$type' | '/dns'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ip-info' | '/dns/$type' | '/dns'
  id: '__root__' | '/' | '/ip-info' | '/dns/$type' | '/dns/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  IpInfoLazyRoute: typeof IpInfoLazyRoute
  DnsTypeLazyRoute: typeof DnsTypeLazyRoute
  DnsIndexLazyRoute: typeof DnsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  IpInfoLazyRoute: IpInfoLazyRoute,
  DnsTypeLazyRoute: DnsTypeLazyRoute,
  DnsIndexLazyRoute: DnsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ip-info",
        "/dns/$type",
        "/dns/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/ip-info": {
      "filePath": "ip-info.lazy.tsx"
    },
    "/dns/$type": {
      "filePath": "dns/$type.lazy.tsx"
    },
    "/dns/": {
      "filePath": "dns/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
